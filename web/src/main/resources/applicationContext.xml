<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
>
	<!--导入electronicTag.properties文件-->
	<context:property-placeholder location="classpath:dcac.properties" ignore-resource-not-found="true" ignore-unresolvable="true"/>
	<!--扫描注解除了 Controller 和 ControllerAdvice-->
	<context:component-scan base-package="com.huatusoft">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="${message.cache_seconds}" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="basenames">
			<list>
				<value>${message.common_path}</value>
				<value>${message.shop_path}</value>
				<value>${message.admin_path}</value>
			</list>
		</property>
	</bean>

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${task.core_pool_size}" />
		<property name="maxPoolSize" value="${task.max_pool_size}" />
		<property name="queueCapacity" value="${task.queue_capacity}" />
		<property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
	</bean>
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>


	<!--redis-->
<!--	<context:property-placeholder location="classpath:redis.properties" ignore-resource-not-found="true" ignore-unresolvable="true"/>-->

<!--	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
<!--		&lt;!&ndash;最大连接数&ndash;&gt;-->
<!--		<property name="maxTotal" value="${redis.pool.maxTotal}"/>-->
<!--		&lt;!&ndash;最大空闲数&ndash;&gt;-->
<!--		<property name="maxIdle" value="${redis.pool.maxIdle}"/>-->
<!--		&lt;!&ndash;最长等待时间&ndash;&gt;-->
<!--		<property name="maxWaitMillis" value="${redis.pool.maxWait}"/>-->
<!--		&lt;!&ndash;在空闲时检查有效性&ndash;&gt;-->
<!--		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>-->
<!--	</bean>-->

<!--	<bean id="jedisPool" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">-->
<!--		<property name="poolConfig" ref="jedisPoolConfig"/>-->
<!--		<property name="hostName" value="${redis.hostname}"/>-->
<!--		<property name="port" value="${redis.port}"/>-->
<!--	</bean>-->

<!--	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >-->
<!--		<property name="connectionFactory" ref="jedisPool" />-->
<!--		&lt;!&ndash;如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  &ndash;&gt;-->
<!--		<property name="keySerializer" >-->
<!--			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
<!--		</property>-->
<!--		<property name="valueSerializer" >-->
<!--			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />-->
<!--		</property>-->
<!--		<property name="hashKeySerializer">-->
<!--			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
<!--		</property>-->
<!--		<property name="hashValueSerializer">-->
<!--			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>-->
<!--		</property>-->
<!--	</bean >-->

	<!--redis数据失效监听 -->
<!--	<bean id="messageListener"-->
<!--		  class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">-->
<!--		<constructor-arg>-->
<!--			<bean class="com.huatusoft.dcac.web.listener.redis.MyRedisKeyExpiredMessageDelegate" />-->
<!--		</constructor-arg>-->
<!--	</bean>-->
<!--	<bean id="redisContainer"-->
<!--		  class="org.springframework.data.redis.listener.RedisMessageListenerContainer">-->
<!--	<property name="connectionFactory" ref="jedisPool" />-->
<!--	<property name="messageListeners">-->
<!--		<map>-->
<!--			<entry key-ref="messageListener">-->
<!--				<list>-->
<!--					<bean class="org.springframework.data.redis.listener.PatternTopic">-->
<!--						<constructor-arg value="__key*__:expired" />-->
<!--					</bean>-->
<!--				</list>-->
<!--			</entry>-->
<!--		</map>-->
<!--	</property>-->
<!--	</bean>-->

	<!--配置缓存工厂-->
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
		<property name="shared" value="true" />
	</bean>
	<!--配置缓存管理器-->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<!--开启spring缓存-->
	<cache:annotation-driven  cache-manager="cacheManager" />
	<task:annotation-driven />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="import*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="upload*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="register*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="set*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="Get*" propagation="REQUIRED" read-only="false"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 定义使用事务管理的方法 -->
	<aop:config>
		<aop:pointcut id="managerMethod" expression="execution(* com.huatusoft.dcac.*.service.*.*(..))"/>
		<aop:advisor pointcut-ref="managerMethod" advice-ref="txAdvice"/>
	</aop:config>

	<jpa:repositories base-package="com.huatusoft.**.dao"
					  repository-impl-postfix="Impl"
					  query-lookup-strategy = "create-if-not-found"
					  factory-class="com.huatusoft.dcac.base.factory.BaseDaoFactoryBean"
					  entity-manager-factory-ref="entityManagerFactory"
					  transaction-manager-ref="transactionManager">
	</jpa:repositories>
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<aop:aspectj-autoproxy proxy-target-class="true" />
</beans>